name: üöÄ TimmyBot CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
    paths:
      - 'src/**'
      - 'discord-js/**'
      - 'build.gradle.kts'
      - 'Dockerfile'
      - '.github/workflows/**'
      - 'cdk/**'  # Trigger on CDK infrastructure changes

env:
  AWS_REGION: eu-central-1
  ECR_REPOSITORY_KOTLIN: timmybot
  ECR_REPOSITORY_DISCORDJS: timmybot-discordjs
  ECS_SERVICE: timmybot-dev-service
  ECS_CLUSTER: timmybot-dev-cluster
  CONTAINER_NAME: timmybot-dev-container

jobs:
  # ================================
  # DETECT CHANGES
  # ================================
  detect-changes:
    name: üîç Detect Changes
    runs-on: ubuntu-latest
    outputs:
      kotlin-changed: ${{ steps.changes.outputs.kotlin }}
      discordjs-changed: ${{ steps.changes.outputs.discordjs }}
      cdk-changed: ${{ steps.changes.outputs.cdk }}
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2
        
    - name: üîç Check for changes
      id: changes
      run: |
        if git diff --name-only HEAD~1 HEAD | grep -E "^(src/|build.gradle.kts|Dockerfile)"; then
          echo "kotlin=true" >> $GITHUB_OUTPUT
        else
          echo "kotlin=false" >> $GITHUB_OUTPUT
        fi
        
        if git diff --name-only HEAD~1 HEAD | grep -E "^discord-js/"; then
          echo "discordjs=true" >> $GITHUB_OUTPUT
        else
          echo "discordjs=false" >> $GITHUB_OUTPUT
        fi
        
        if git diff --name-only HEAD~1 HEAD | grep -E "^cdk/"; then
          echo "cdk=true" >> $GITHUB_OUTPUT
        else
          echo "cdk=false" >> $GITHUB_OUTPUT
        fi

  # ================================
  # DISCORD.JS BUILD, TEST & DEPLOY
  # ================================
  build-test-deploy-discordjs:
    name: üéµ Build, Test & Deploy Discord.js
    runs-on: ubuntu-latest
    needs: detect-changes
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && needs.detect-changes.outputs.discordjs-changed == 'true'
    permissions:
      id-token: write   # Required for OIDC authentication
      contents: read    # Required for checkout
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üîß Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: 'discord-js/package-lock.json'
        
    - name: üì¶ Install Discord.js dependencies
      run: |
        cd discord-js
        npm ci
        
    - name: üß™ Run Discord.js tests
      run: |
        cd discord-js
        npm run test
        
    - name: üìä Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: discordjs-test-results
        path: discord-js/coverage
      
    - name: üèóÔ∏è Build Discord.js application
      run: |
        cd discord-js
        npm run build
        
    - name: üîë Configure AWS credentials (OIDC Role)
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}
        role-session-name: GitHubActions-TimmyBot-DiscordJS
        
    - name: üèÉ Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: üè∑Ô∏è Generate image tags
      id: meta
      run: |
        echo "IMAGE_TAG=discordjs-${GITHUB_SHA::8}" >> $GITHUB_OUTPUT
        echo "LATEST_TAG=latest" >> $GITHUB_OUTPUT
        echo "ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}" >> $GITHUB_OUTPUT
        echo "IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_DISCORDJS }}:discordjs-${GITHUB_SHA::8}" >> $GITHUB_OUTPUT
        
    - name: üê≥ Build Discord.js Docker image
      run: |
        cd discord-js
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_DISCORDJS:${{ steps.meta.outputs.IMAGE_TAG }} .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY_DISCORDJS:${{ steps.meta.outputs.IMAGE_TAG }} $ECR_REGISTRY/$ECR_REPOSITORY_DISCORDJS:${{ steps.meta.outputs.LATEST_TAG }}
      env:
        ECR_REGISTRY: ${{ steps.meta.outputs.ECR_REGISTRY }}
        ECR_REPOSITORY_DISCORDJS: ${{ env.ECR_REPOSITORY_DISCORDJS }}
        
    - name: üöÄ Push Discord.js Docker image to ECR
      run: |
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_DISCORDJS:${{ steps.meta.outputs.IMAGE_TAG }}
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_DISCORDJS:${{ steps.meta.outputs.LATEST_TAG }}
      env:
        ECR_REGISTRY: ${{ steps.meta.outputs.ECR_REGISTRY }}
        ECR_REPOSITORY_DISCORDJS: ${{ env.ECR_REPOSITORY_DISCORDJS }}
        
    - name: üìù Download ECS task definition
      run: |
        aws ecs describe-task-definition \
          --task-definition timmybot-dev-task \
          --query taskDefinition > task-definition.json
          
    - name: üîÑ Update ECS task definition for Discord.js
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.meta.outputs.IMAGE_URI }}
        
    - name: üöÄ Deploy Discord.js to Amazon ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
        
    - name: üìä Display Discord.js deployment info
      run: |
        echo "‚úÖ **Discord.js Deployment Successful!**"
        echo "üê≥ **Docker Image**: ${{ steps.meta.outputs.IMAGE_URI }}"
        echo "üèóÔ∏è **ECS Service**: ${{ env.ECS_SERVICE }}"
        echo "üéØ **Cluster**: ${{ env.ECS_CLUSTER }}"
        echo "üìç **Region**: ${{ env.AWS_REGION }}"
        echo ""
        echo "üîç **Verify deployment**:"
        echo "aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }} --region ${{ env.AWS_REGION }}"

  # ================================
  # KOTLIN BUILD, TEST & DEPLOY (Legacy)
  # ================================
  build-test-deploy-kotlin:
    name: ‚òï Build, Test & Deploy Kotlin (Legacy)
    runs-on: ubuntu-latest
    needs: detect-changes
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && needs.detect-changes.outputs.kotlin-changed == 'true'
    permissions:
      id-token: write   # Required for OIDC authentication
      contents: read    # Required for checkout
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: ‚òï Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: üì¶ Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: üîß Make gradlew executable
      run: chmod +x gradlew
      
    - name: üß™ Run unit tests
      run: ./gradlew test
      
    - name: üìä Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: kotlin-test-results
        path: build/test-results
      
    - name: üèóÔ∏è Build application
      run: ./gradlew build
      
    - name: üîë Configure AWS credentials (OIDC Role)
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}
        role-session-name: GitHubActions-TimmyBot-Kotlin
        
    - name: üèÉ Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: üè∑Ô∏è Generate image tags
      id: meta
      run: |
        echo "IMAGE_TAG=guild-isolation-${GITHUB_SHA::8}" >> $GITHUB_OUTPUT
        echo "LATEST_TAG=guild-isolation-latest" >> $GITHUB_OUTPUT
        echo "ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}" >> $GITHUB_OUTPUT
        echo "IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_KOTLIN }}:guild-isolation-${GITHUB_SHA::8}" >> $GITHUB_OUTPUT
        
    - name: üê≥ Build Kotlin Docker image
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_KOTLIN:${{ steps.meta.outputs.IMAGE_TAG }} .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY_KOTLIN:${{ steps.meta.outputs.IMAGE_TAG }} $ECR_REGISTRY/$ECR_REPOSITORY_KOTLIN:${{ steps.meta.outputs.LATEST_TAG }}
      env:
        ECR_REGISTRY: ${{ steps.meta.outputs.ECR_REGISTRY }}
        ECR_REPOSITORY_KOTLIN: ${{ env.ECR_REPOSITORY_KOTLIN }}
        
    - name: üöÄ Push Kotlin Docker image to ECR
      run: |
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_KOTLIN:${{ steps.meta.outputs.IMAGE_TAG }}
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_KOTLIN:${{ steps.meta.outputs.LATEST_TAG }}
      env:
        ECR_REGISTRY: ${{ steps.meta.outputs.ECR_REGISTRY }}
        ECR_REPOSITORY_KOTLIN: ${{ env.ECR_REPOSITORY_KOTLIN }}

  # ================================
  # CDK INFRASTRUCTURE DEPLOYMENT
  # ================================
  deploy-infrastructure:
    name: üèóÔ∏è Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: detect-changes
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && needs.detect-changes.outputs.cdk-changed == 'true'
    permissions:
      id-token: write   # Required for OIDC authentication
      contents: read    # Required for checkout
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üîß Set up Node.js for CDK
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'cdk/package-lock.json'
        
    - name: üì¶ Install CDK dependencies
      run: |
        cd cdk
        npm ci
        
    - name: üîë Configure AWS credentials (OIDC Role)
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}
        role-session-name: GitHubActions-TimmyBot-CDK
        
    - name: üöÄ Deploy CDK Infrastructure
      run: |
        cd cdk
        echo "üèóÔ∏è Deploying CDK infrastructure changes..."
        cdk deploy --all --require-approval never
        echo "‚úÖ CDK deployment completed"
        
    - name: üìä Display infrastructure deployment info
      run: |
        echo "‚úÖ **Infrastructure Deployment Successful!**"
        echo "üèóÔ∏è **CDK Stacks**: Deployed"
        echo "üìç **Region**: ${{ env.AWS_REGION }}"

  # ================================
  # SECURITY SCANNING
  # ================================
  security-scan:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üîç Run Trivy vulnerability scanner on Kotlin
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-kotlin-results.sarif'
        
    - name: üîç Run Trivy vulnerability scanner on Discord.js
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: 'discord-js'
        format: 'sarif'
        output: 'trivy-discordjs-results.sarif'
        
    - name: üì§ Upload Kotlin scan results to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-kotlin-results.sarif'
        
    - name: üì§ Upload Discord.js scan results to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-discordjs-results.sarif'